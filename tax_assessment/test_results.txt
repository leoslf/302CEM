python -m pytest tests
============================= test session starts ==============================
platform darwin -- Python 2.7.15, pytest-4.2.0, py-1.5.2, pluggy-0.8.1
rootdir: /Users/leosin/bit/302CEM/tax_assessment, inifile:
collected 16 items

tests/simple_tax_assessment_test.py ......FF.F.F.F..                     [100%]

=================================== FAILURES ===================================
_______________________________ test_run[case6] ________________________________

case = {'Case': 'Middle Husband Income & Low Wife Income', 'expected_tax': '769140', 'marital_status': 'y', 'self_NI': '3126000', ...}

    @pytest.mark.parametrize("case", cases())
    def test_run(case):
        eprint("Case: %s" % case["Case"])
    
        eprint("case object: \"%r\"" % case)
    
        input_string = "\n".join(map(str, map(lambda key: case[key], ["self_income", "marital_status", "spouse_income"]))) + "\n"
        eprint("input_string: \"%s\"" % input_string)
        expected_tax = int(case["expected_tax"])
    
        p = Popen(["python", "simple_tax_assessment.py"], stdin=PIPE, stdout=PIPE, stderr=PIPE)
        stdout, stderr = p.communicate(input=input_string)
    
    
        eprint("stderr:\n\"%s\"" % stderr)
        # eprint ("stdout: %s" % stdout)
        actual_tax = int(stdout)
    
        eprint("expected_tax: %d" % expected_tax)
        eprint("actual_tax: %d" % actual_tax)
    
>       assert expected_tax == actual_tax
E       assert 769140 == 769500

tests/simple_tax_assessment_test.py:40: AssertionError
----------------------------- Captured stderr call -----------------------------
Case: Middle Husband Income & Low Wife Income
case object: "{'Case': 'Middle Husband Income & Low Wife Income', 'spouse_mpf': '18000', 'spouse_NI': '2004000', 'self_income': '3144000', 'expected_tax': '769140', 'marital_status': 'y', 'spouse_income': '2022000', 'self_mpf': '18000', 'self_NI': '3126000'}"
input_string: "3144000
y
2022000
"
stderr:
"Please input your income > Personal MPF is: 18000.00
Personal Tax in standard rate: 468900.00
Personal Tax in progressive rate: 490980.00
Please input your marital status. [Y/N] Please input spouse income > Spouse MPF is: 18000.00
Spouse Tax in standard rate: 300600.00
Spouse Tax in progressive rate: 300240.00
Joint MPF is: 36000.00
Joint Tax in standard rate: 769500.00
Joint Tax in progressive rate: 809220.00
[769500, 769500, 809220, 791220]
required taxRecommend separate assessment using standard Tax Rate
"
expected_tax: 769140
actual_tax: 769500
_______________________________ test_run[case7] ________________________________

case = {'Case': 'High Husband Income & Low Wife Income', 'expected_tax': '1797539', 'marital_status': 'y', 'self_NI': '9981999', ...}

    @pytest.mark.parametrize("case", cases())
    def test_run(case):
        eprint("Case: %s" % case["Case"])
    
        eprint("case object: \"%r\"" % case)
    
        input_string = "\n".join(map(str, map(lambda key: case[key], ["self_income", "marital_status", "spouse_income"]))) + "\n"
        eprint("input_string: \"%s\"" % input_string)
        expected_tax = int(case["expected_tax"])
    
        p = Popen(["python", "simple_tax_assessment.py"], stdin=PIPE, stdout=PIPE, stderr=PIPE)
        stdout, stderr = p.communicate(input=input_string)
    
    
        eprint("stderr:\n\"%s\"" % stderr)
        # eprint ("stdout: %s" % stdout)
        actual_tax = int(stdout)
    
        eprint("expected_tax: %d" % expected_tax)
        eprint("actual_tax: %d" % actual_tax)
    
>       assert expected_tax == actual_tax
E       assert 1797539 == 1797899

tests/simple_tax_assessment_test.py:40: AssertionError
----------------------------- Captured stderr call -----------------------------
Case: High Husband Income & Low Wife Income
case object: "{'Case': 'High Husband Income & Low Wife Income', 'spouse_mpf': '18000', 'spouse_NI': '2004000', 'self_income': '9999999', 'expected_tax': '1797539', 'marital_status': 'y', 'spouse_income': '2022000', 'self_mpf': '18000', 'self_NI': '9981999'}"
input_string: "9999999
y
2022000
"
stderr:
"Please input your income > Personal MPF is: 18000.00
Personal Tax in standard rate: 1497299.00
Personal Tax in progressive rate: 1656499.00
Please input your marital status. [Y/N] Please input spouse income > Spouse MPF is: 18000.00
Spouse Tax in standard rate: 300600.00
Spouse Tax in progressive rate: 300240.00
Joint MPF is: 36000.00
Joint Tax in standard rate: 1797899.00
Joint Tax in progressive rate: 1974739.00
[1797899, 1797899, 1974739, 1956739]
required taxRecommend separate assessment using standard Tax Rate
"
expected_tax: 1797539
actual_tax: 1797899
_______________________________ test_run[case9] ________________________________

case = {'Case': 'Low Husband Income & Middle Wife Income', 'expected_tax': '769140', 'marital_status': 'y', 'self_NI': '2004000', ...}

    @pytest.mark.parametrize("case", cases())
    def test_run(case):
        eprint("Case: %s" % case["Case"])
    
        eprint("case object: \"%r\"" % case)
    
        input_string = "\n".join(map(str, map(lambda key: case[key], ["self_income", "marital_status", "spouse_income"]))) + "\n"
        eprint("input_string: \"%s\"" % input_string)
        expected_tax = int(case["expected_tax"])
    
        p = Popen(["python", "simple_tax_assessment.py"], stdin=PIPE, stdout=PIPE, stderr=PIPE)
        stdout, stderr = p.communicate(input=input_string)
    
    
        eprint("stderr:\n\"%s\"" % stderr)
        # eprint ("stdout: %s" % stdout)
        actual_tax = int(stdout)
    
        eprint("expected_tax: %d" % expected_tax)
        eprint("actual_tax: %d" % actual_tax)
    
>       assert expected_tax == actual_tax
E       assert 769140 == 769500

tests/simple_tax_assessment_test.py:40: AssertionError
----------------------------- Captured stderr call -----------------------------
Case: Low Husband Income & Middle Wife Income
case object: "{'Case': 'Low Husband Income & Middle Wife Income', 'spouse_mpf': '18000', 'spouse_NI': '3126000', 'self_income': '2022000', 'expected_tax': '769140', 'marital_status': 'y', 'spouse_income': '3144000', 'self_mpf': '18000', 'self_NI': '2004000'}"
input_string: "2022000
y
3144000
"
stderr:
"Please input your income > Personal MPF is: 18000.00
Personal Tax in standard rate: 300600.00
Personal Tax in progressive rate: 300240.00
Please input your marital status. [Y/N] Please input spouse income > Spouse MPF is: 18000.00
Spouse Tax in standard rate: 468900.00
Spouse Tax in progressive rate: 490980.00
Joint MPF is: 36000.00
Joint Tax in standard rate: 769500.00
Joint Tax in progressive rate: 809220.00
[769500, 769500, 809220, 791220]
required taxRecommend separate assessment using standard Tax Rate
"
expected_tax: 769140
actual_tax: 769500
_______________________________ test_run[case11] _______________________________

case = {'Case': 'High Husband Income & Middle Wife Income', 'expected_tax': '1971599', 'marital_status': 'y', 'self_NI': '9981999', ...}

    @pytest.mark.parametrize("case", cases())
    def test_run(case):
        eprint("Case: %s" % case["Case"])
    
        eprint("case object: \"%r\"" % case)
    
        input_string = "\n".join(map(str, map(lambda key: case[key], ["self_income", "marital_status", "spouse_income"]))) + "\n"
        eprint("input_string: \"%s\"" % input_string)
        expected_tax = int(case["expected_tax"])
    
        p = Popen(["python", "simple_tax_assessment.py"], stdin=PIPE, stdout=PIPE, stderr=PIPE)
        stdout, stderr = p.communicate(input=input_string)
    
    
        eprint("stderr:\n\"%s\"" % stderr)
        # eprint ("stdout: %s" % stdout)
        actual_tax = int(stdout)
    
        eprint("expected_tax: %d" % expected_tax)
        eprint("actual_tax: %d" % actual_tax)
    
>       assert expected_tax == actual_tax
E       assert 1971599 == 1966199

tests/simple_tax_assessment_test.py:40: AssertionError
----------------------------- Captured stderr call -----------------------------
Case: High Husband Income & Middle Wife Income
case object: "{'Case': 'High Husband Income & Middle Wife Income', 'spouse_mpf': '18000', 'spouse_NI': '3126000', 'self_income': '9999999', 'expected_tax': '1971599', 'marital_status': 'y', 'spouse_income': '3144000', 'self_mpf': '18000', 'self_NI': '9981999'}"
input_string: "9999999
y
3144000
"
stderr:
"Please input your income > Personal MPF is: 18000.00
Personal Tax in standard rate: 1497299.00
Personal Tax in progressive rate: 1656499.00
Please input your marital status. [Y/N] Please input spouse income > Spouse MPF is: 18000.00
Spouse Tax in standard rate: 468900.00
Spouse Tax in progressive rate: 490980.00
Joint MPF is: 36000.00
Joint Tax in standard rate: 1966199.00
Joint Tax in progressive rate: 2165479.00
[1966199, 1966199, 2165479, 2147479]
required taxRecommend separate assessment using standard Tax Rate
"
expected_tax: 1971599
actual_tax: 1966199
_______________________________ test_run[case13] _______________________________

case = {'Case': 'Low Husband Income & High Wife Income', 'expected_tax': '1797539', 'marital_status': 'y', 'self_NI': '2004000', ...}

    @pytest.mark.parametrize("case", cases())
    def test_run(case):
        eprint("Case: %s" % case["Case"])
    
        eprint("case object: \"%r\"" % case)
    
        input_string = "\n".join(map(str, map(lambda key: case[key], ["self_income", "marital_status", "spouse_income"]))) + "\n"
        eprint("input_string: \"%s\"" % input_string)
        expected_tax = int(case["expected_tax"])
    
        p = Popen(["python", "simple_tax_assessment.py"], stdin=PIPE, stdout=PIPE, stderr=PIPE)
        stdout, stderr = p.communicate(input=input_string)
    
    
        eprint("stderr:\n\"%s\"" % stderr)
        # eprint ("stdout: %s" % stdout)
        actual_tax = int(stdout)
    
        eprint("expected_tax: %d" % expected_tax)
        eprint("actual_tax: %d" % actual_tax)
    
>       assert expected_tax == actual_tax
E       assert 1797539 == 1797899

tests/simple_tax_assessment_test.py:40: AssertionError
----------------------------- Captured stderr call -----------------------------
Case: Low Husband Income & High Wife Income
case object: "{'Case': 'Low Husband Income & High Wife Income', 'spouse_mpf': '18000', 'spouse_NI': '9981999', 'self_income': '2022000', 'expected_tax': '1797539', 'marital_status': 'y', 'spouse_income': '9999999', 'self_mpf': '18000', 'self_NI': '2004000'}"
input_string: "2022000
y
9999999
"
stderr:
"Please input your income > Personal MPF is: 18000.00
Personal Tax in standard rate: 300600.00
Personal Tax in progressive rate: 300240.00
Please input your marital status. [Y/N] Please input spouse income > Spouse MPF is: 18000.00
Spouse Tax in standard rate: 1497299.00
Spouse Tax in progressive rate: 1656499.00
Joint MPF is: 36000.00
Joint Tax in standard rate: 1797899.00
Joint Tax in progressive rate: 1974739.00
[1797899, 1797899, 1974739, 1956739]
required taxRecommend separate assessment using standard Tax Rate
"
expected_tax: 1797539
actual_tax: 1797899
========================== deprecated python version ===========================
You are using Python 2.7.15, which will no longer be supported in pytest 5.0
For more information, please read:
  https://docs.pytest.org/en/latest/py27-py34-deprecation.html
===================== 5 failed, 11 passed in 0.57 seconds ======================
make: *** [test] Error 1
